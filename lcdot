#!/usr/bin/env bash
# This script was generated by bashly 1.1.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
lcdot_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  else
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot COMMAND\n"
  printf "  lcdot [COMMAND] --help | -h\n"
  printf "  lcdot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install a certain tool configuration\n" "install"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "LCDOT_BACKUP"
    printf "    path to save backups before installing\n"
    printf "    Default: $HOME/lcdot_backup\n"
    echo

  fi
}

# :command.usage
lcdot_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot install - Install a certain tool configuration\n"
    echo

  else
    printf "lcdot install - Install a certain tool configuration\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot install [TOOL...] [OPTIONS]\n"
  printf "  lcdot install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/<name-of-tool>\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration, when possible\n"
    echo

    # :flag.usage
    printf "  %s\n" "--dep, -d"
    printf "    Install common dependencies before installing tools\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "TOOL..."
    printf "    name of the tool(s) to install\n"
    printf "    Allowed: nvim, starship, delta, exa, bat, bob, zellij, mprocs, gitui, lazygit, porsmo, wikitui, fd, zoxide, rtx, navi, tmux, ncspot, vim, wezterm, zsh, sccache, alacritty, fzf, all\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./lcdot install zsh starship alacritty -b\n"
    printf "  ./lcdot install tmux zellij -i\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/alacritty.sh
install_alacritty() {

	local backup=${args[--backup]}
	local install=${args[--install]}
	local DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing alacritty"

		echo "Installing dependencies"
		if command -v pacman; then
			echo "Arch based distro detected, installing alacritty dependencies using pacman"
			pacman -S cmake freetype2 fontconfig pkg-config make libxcb libxkbcommon python

		else
			echo "Installing alacritty dependencies using apt"
			sudo apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3 -y
		fi

		if command -v alacritty; then

			echo "Cloning alacritty repository"
			mkdir -p $HOME/alacritty
			git clone https://github.com/alacritty/alacritty.git $HOME/alacritty
			cd $HOME/alacritty
			echo "Building alacritty"
			cargo build --release

			echo "Adding alacritty terminfo"
			sudo tic -xe alacritty, alacritty-direct extra/alacritty.info

			echo "Creating desktop entry"
			sudo cp target/release/alacritty /usr/local/bin
			sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
			sudo desktop-file-install extra/linux/Alacritty.desktop
			sudo update-desktop-database

			echo "Adding alacritty page to man"
			sudo mkdir -p /usr/local/share/man/man1
			sudo mkdir -p /usr/local/share/man/man5
			scdoc <extra/man/alacritty.1.scd | gzip -c | sudo tee /usr/local/share/man/man1/alacritty.1.gz >/dev/null
			scdoc <extra/man/alacritty-msg.1.scd | gzip -c | sudo tee /usr/local/share/man/man1/alacritty-msg.1.gz >/dev/null
			scdoc <extra/man/alacritty.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty.5.gz >/dev/null
			scdoc <extra/man/alacritty-bindings.5.scd | gzip -c | sudo tee /usr/local/share/man/man5/alacritty-bindings.5.gz >/dev/null
		fi
	fi
	echo "Installing  alacritty configuration from $DOTFILES_LOCATION"
	mkdir -p "$HOME/.config/alacritty"
	if [ "$backup" ]; then
		echo "Moving previous configurations in $LCDOT_BACKUP/alacritty"
		mkdir -p "$LCDOT_BACKUP"/alacritty

		mv "$HOME/.config/alacritty/*.toml" "$LCDOT_BACKUP"/alacritty/
	fi

	echo "Setting up alacritty configuration"
	ln -s "$DOTFILES_LOCATION/alacritty/alacritty.toml" "$HOME/.config/alacritty/alacritty.toml"
	ln -s "$DOTFILES_LOCATION/alacritty/tokyonight-storm.toml" "$HOME/.config/alacritty/tokyonight-storm.toml"
}

# src/lib/all.sh
install_all() {

	install_dependencies

	echo "Installing sccache first to use for later installations"
	install_sccache

	install_bob

	install_bat

	install_delta

	install_exa

	install_fd

	install_gitui

	install_lazygit

	install_mprocs

	install_navi

	install_nvim

	install_porsmo

	install_rtx

	install_starship

	install_tmux

	install_wezterm

	install_wikitui

	install_zellij

	install_zoxide

	install_zsh

	install_fzf

	install_procs

	echo "Everything is set up, have fun!"
}

# src/lib/bat.sh
install_bat() {
	local backup=${args[--backup]}
	local install=${args[--install]}
	local DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing bat"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S bat

		else
			echo "Installing bat with cargo"
			cargo install --locked bat
		fi
	fi
	echo "Installing bat configuration from $DOTFILES_LOCATION"
	local bat_config_file=$(bat --config-file)
	mkdir -p "$(dirname "$bat_config_file")"
	if [ "$backup" ]; then
		echo "Moving previous configurations in $LCDOT_BACKUP/bat"
		mkdir -p "$LCDOT_BACKUP"/bat

		mv "$bat_config_file" "$LCDOT_BACKUP"/bat/bat.old
	fi

	echo "Setting up bat configuration"
	ln -sf "$DOTFILES_LOCATION/bat/config" "$(bat --config-file)"
	ln -sfn "$DOTFILES_LOCATION/bat/themes/" "$(bat --config-dir)"
}

# src/lib/bob.sh
install_bob() {
	local backup=${args[--backup]}
	local install=${args[--install]}
	local DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing bob-nvim "
		cargo install --git https://github.com/MordechaiHadad/bob.git
	fi
	echo "Installing bob-nvim configuration from $DOTFILES_LOCATION"

	local bob_config_file=$HOME/.config/bob/config.json
	if [ "$BOB_CONFIG" ]; then
		bob_config_file=$BOB_CONFIG
	fi

	mkdir -p "$(dirname "$bob_config_file")"

	if [ "$backup" ]; then
		echo "Moving previous configurations in $LCDOT_BACKUP/bob-nvim"
		mkdir -p "$LCDOT_BACKUP"/bob-nvim
		mv "$bob_config_file" "$LCDOT_BACKUP"/bob-nvim/config.json
	fi

	echo "Setting up bob-nvim configuration"
	ln -sf "$DOTFILES_LOCATION"/bob-nvim/config.json "$bob_config_file"
}

# src/lib/delta.sh
install_delta() {
	backup=${args[--backup]}
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing git-delta"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S git-delta

		else
			echo "Installing bat with cargo"
			cargo install git-delta
		fi
	fi
	echo "Installing git configuration from $DOTFILES_LOCATION"

	if [ "$backup" ]; then
		echo "Moving present gitconfig file to $LCDOT_BACKUP/gitconfig"
		mkdir -p "$LCDOT_BACKUP"/gitconfig
		mv "$HOME"/.gitconfig "$LCDOT_BACKUP"/gitconfig/gitconfig.old
	fi
	echo "Linking gitconfig file in home directory"
	ln -sf "$DOTFILES_LOCATION/gitconfig/gitconfig" "$HOME/.gitconfig"
	echo "Done"
}

# src/lib/dependencies.sh
install_dependencies() {
	echo "Installing common dependencies and libraries"
	sudo apt-get install libssl-dev libffi-dev libncurses5-dev zlib1g zlib1g-dev libreadline-dev libbz2-dev libsqlite3-dev make gcc unzip libstdc++6 g++ libyaml-dev librust-alsa-sys-dev libxcb-xfixes0-dev libxcb-shape0-dev gzip -y
	echo "Done"
}

# src/lib/exa.sh
install_exa() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing exa"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S exa

		else
			echo "Installing exa with cargo"
			cargo install exa
		fi
	fi

	echo "There is no configuration to install for exa, congrats!"
}

# src/lib/fd-find.sh
install_fd() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing fd-find"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S fd

		else
			echo "Installing fd-find with cargo"
			cargo install fd-find
		fi
	fi

	echo "There is no configuration to install for fd, congrats!"
}

# src/lib/fzf.sh
install_fzf() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing fzf"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S fzf

		else
			if command -v fzf; then
				echo "fzf is already installed"
			else
				echo "Installing from source cloning fzf repo in $HOME/.fzf"
				git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
				~/.fzf/install
			fi
		fi
	fi

	echo "Moving fzf aliases in $HOME/.fzf_alias"
	ln -sf "$DOTFILES_LOCATION"/fzf/fzf_alias "$HOME"/.fzf_alias
}

# src/lib/gitui.sh
install_gitui() {
	backup=${args[--backup]}
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing gitui"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S gitui

		else
			echo "Installing gitui with cargo"
			cargo install gitui
		fi
	fi

	if [ "$backup" ]; then
		echo "Moving present gitconfig file to $LCDOT_BACKUP/gitui"
		mkdir -p "$LCDOT_BACKUP"/gitui
		mv "$HOME"/.config/gitui/* "$LCDOT_BACKUP"/gitui/
	fi
	echo "Setting up gitui configuration"
	ln -sfn "$DOTFILES_LOCATION/gitui/" "$HOME/.config/gitui"
	echo "Done"
}

# src/lib/lazygit.sh
install_lazygit() {
	backup=${args[--backup]}
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing lazygit"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S lazygit

		else
			echo "Installing lazygit via release tarball"

			LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": "v\K[^"]*')
			curl -Lo $DOTFILES_LOCATION/lazygit/lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
			tar xf $DOTFILES_LOCATION/lazygit/lazygit.tar.gz -C $DOTFILES_LOCATION/lazygit/
			sudo install $DOTFILES_LOCATION/lazygit/lazygit /usr/local/bin
			rm $DOTFILES_LOCATION/lazygit/lazygit.tar.gz $DOTFILES_LOCATION/lazygit/lazygit
		fi
	fi
	echo "Installing lazygit configuration from $DOTFILES_LOCATION"
	mkdir -p "$HOME"/.config/lazygit
	if [ "$backup" ]; then
		echo "Moving previous configurations in $LCDOT_BACKUP/lazygit"
		mkdir -p "$LCDOT_BACKUP"/lazygit

		mv "$HOME"/.config/lazygit/* "$LCDOT_BACKUP"/lazygit/
	fi

	echo "Setting up lazygit configuration"
	ln -sf "$DOTFILES_LOCATION"/lazygit/config.yml "$HOME"/.config/lazygit/config.yml
}

# src/lib/mprocs.sh
install_mprocs() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing mprocs"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S mprocs

		else
			echo "Installing lazygit with cargo"
			cargo install mprocs
		fi
	fi
	echo "There is no configuration to install for mprocs, congrats!"
}

# src/lib/navi.sh
install_navi() {
	backup=${args[--backup]}
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing navi"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S navi

		else
			echo "Installing navi with cargo"
			cargo install navi --locked
		fi
	fi
	echo "Installing navi configuration from $DOTFILES_LOCATION"
	navi_config_file=$(navi info config-path)
	mkdir -p "$(dirname "$navi_config_file")"
	if [ "$backup" ]; then
		echo "Moving previous configurations in $LCDOT_BACKUP/navi"
		mkdir -p "$LCDOT_BACKUP"/navi

		mv "$navi_config_file" "$LCDOT_BACKUP"/navi/
	fi

	echo "Setting up navi configuration"
	ln -sf "$DOTFILES_LOCATION"/navi/config.yaml "$navi_config_file"
	echo "Done"
}

# src/lib/ncspot.sh
install_ncspot() {
    install=${args[--install]}
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD

    if [ "$install" ]; then
        echo "Installing ncspot"
        cargo install ncspot --locked
    fi

    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/ncspot"
        mkdir -p "$LCDOT_BACKUP"/rust-tools/ncspot

        mv "$HOME"/.config/ncspot "$LCDOT_BACKUP"/rust-tools/ncspot
    fi

    echo "Setting up ncspot configuration"
    ln -sfn "$DOTFILES_LOCATION/ncspot/" "$HOME/.config/ncspot"
    echo "Done"
}

# src/lib/nvim.sh
install_nvim() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "installing nvim configuration from $DOTFILES_LOCATION"

    mkdir -p "$HOME"/.config
    if [ "$backup" ]; then
        echo "moving present configuration to $LCDOT_BACKUP/nvim"
        mkdir -p "$LCDOT_BACKUP"/nvim
        mv "$HOME"/.config/nvim "$LCDOT_BACKUP"/nvim
    fi
    echo "Linking custom config"
    ln -sfr "$DOTFILES_LOCATION/nvim" "$HOME/.config/nvim"
    echo "Done, run nvim and :checkhealth"
}

# src/lib/porsmo.sh
install_porsmo() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing porsmo"
        cargo install porsmo
    fi

    echo "There is no configuration to install for porsmo, congrats!"
}

# src/lib/procs.sh
install_procs() {
	backup=${args[--backup]}
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing procs"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S procs

		else
			echo "Installing procs with cargo"
			cargo install procs
		fi
	fi
	echo "Installing procs configuration from $DOTFILES_LOCATION"
	mkdir -p "$HOME"/.config/procs
	if [ "$backup" ]; then
		echo "Moving previous configurations in $LCDOT_BACKUP/procs"
		mkdir -p "$LCDOT_BACKUP"/procs

		mv "$HOME"/.config/procs/* "$LCDOT_BACKUP"/procs/
	fi

	echo "Setting up procs configuration"
	ln -sf "$DOTFILES_LOCATION"/procs/config.toml "$HOME"/.config/procs/config.toml
}

# src/lib/rtx.sh
install_rtx() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing rtx"
		cargo install rtx-cli
	fi

	echo "Installing rtx global configuration"
	ln -sf "$DOTFILES_LOCATION/rtx/config.toml" "$HOME/.config/rtx/config.toml"
}

# src/lib/sccache.sh
install_sccache() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD

	if [ "$install" ]; then
		echo "Installing sccache"
		cargo install sccache --locked
	fi
	echo "Exporting env var to use sccache for further builds"
	export RUSTC_WRAPPER="$CARGO_HOME/bin/sccache"

	echo "Done"
}

# src/lib/starship.sh
install_starship() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD

    if [ "$install" ]; then
        echo "Installing starship"

        cargo install starship --locked
    fi

    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/starship"
        mkdir -p "$LCDOT_BACKUP"/starship

        mv "$HOME/.config/starship.toml" "$LCDOT_BACKUP"/starship/starship.toml
    fi

    echo "Setting up starship configuration from $DOTFILES_LOCATION"
    ln -sf "$DOTFILES_LOCATION"/starship/starship.toml "$HOME"/.config/starship.toml

    echo "Done"
}

# src/lib/tmux.sh
install_tmux() {
	backup=${args[--backup]}
	DOTFILES_LOCATION=$PWD
	echo "Installing tmux configuration from $DOTFILES_LOCATION"

	if [ "$backup" ]; then
		echo "Moving present configuration in $LCDOT_BACKUP/tmux"
		mkdir -p "$LCDOT_BACKUP"/tmux
		mv "$HOME"/.config/tmux "$LCDOT_BACKUP"/tmux
	fi

	mkdir -p "$HOME/.config/tmux/plugins/tpm"
	ln -sf "$DOTFILES_LOCATION/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"
	ln -sf "$DOTFILES_LOCATION/tmux/tokyonight_storm.tmux" "$HOME/.config/tmux/tokyonight_storm.tmux"
	echo "Installing TPM"
	git clone https://github.com/tmux-plugins/tpm "$HOME/.config/tmux/plugins/tpm" 2>/dev/null || echo "TPM already installed"
	echo "Linking tmux attach script"
	mkdir -p "$HOME/.local/bin"
	ln -sf "$DOTFILES_LOCATION/tmux/ta" "$HOME/.local/bin/ta"
	echo "Done, open tmux and press CTRL I to install plugins"
}

# src/lib/wezterm.sh
install_wezterm() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "Installing wezterm configuration from $DOTFILES_LOCATION"

    if [ "$backup" ]; then
        echo "Moving present configuration to $LCDOT_BACKUP/wezterm"
        mkdir -p "$LCDOT_BACKUP"/wezterm
        mv "$HOME/.config/wezterm" "$LCDOT_BACKUP/wezterm/"
    fi

    mkdir -p "$HOME"/.config/wezterm
    ln -sf "$DOTFILES_LOCATION"/wezterm/wezterm.lua "$HOME"/.config/wezterm/wezterm.lua
    echo "Done"
}

# src/lib/wiki-tui.sh
install_wikitui() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing wiki-tui"
        cargo install wiki-tui
    fi

    echo "There is no configuration to install for wiki-tui, congrats!"
}

# src/lib/zellij.sh
install_zellij() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing zellij"
        cargo install zellij --locked
    fi

    mkdir -p "$HOME"/.config/zellij/
    echo "Installing zellij configuration from $DOTFILES_LOCATION"
    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/zellij"
        mkdir -p "$LCDOT_BACKUP"/zellij/

        mv "$HOME"/.config/zellij/config.kdl "$LCDOT_BACKUP"/zellij/config.kdl
    fi

    echo "Setting up zellij configuration"
    ln -sf "$DOTFILES_LOCATION"/zellij/config.kdl "$HOME"/.config/zellij/config.kdl
}

# src/lib/zoxide.sh
install_zoxide() {
	install=${args[--install]}
	DOTFILES_LOCATION=$PWD
	if [ "$install" ]; then
		echo "Installing zoxide"

		if command -v pacman; then
			echo "Arch based distro detected, installing using pacman"
			sudo pacman -S zoxide

		else
			echo "Installing bat with cargo"
			cargo install zoxide --locked
		fi
	fi

	echo "There is no configuration to install for zoxide, congrats!"
}

# src/lib/zsh.sh
install_zsh() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "Installing zsh configuration from $DOTFILES_LOCATION"
    if [ "$backup" ]; then
        echo "Moving present configuration to $LCDOT_BACKUP/zsh"
        mkdir -p "$LCDOT_BACKUP"/zsh
        [ -f "$HOME"/.zshrc ] && mv "$HOME"/.zshrc "$LCDOT_BACKUP"/zsh/zshrc
        [ -f "$HOME"/.zshenv ] && mv "$HOME"/.zshenv "$LCDOT_BACKUP"/zsh/zshenv
        [ -f "$HOME"/.alias ] && mv "$HOME"/.alias "$LCDOT_BACKUP"/zsh/alias

    fi
    ln -sf "$DOTFILES_LOCATION"/zsh/zshrc "$HOME"/.zshrc
    ln -sf "$DOTFILES_LOCATION"/zsh/zshenv "$HOME"/.zshenv
    ln -sf "$DOTFILES_LOCATION"/alias/alias "$HOME"/.alias

    echo "Done"
}

# :command.command_functions
# :command.function
lcdot_install_command() {
  # src/install_command.sh
  install_tools() {
  	tools=''
  	eval "tools=(${args[tool]})"
  	dep=${args[--dep]}
  	if [ "$dep" ]; then
  		install_dependencies
  	fi
  	for tool in "${tools[@]}"; do
  		echo "Installing $tool"
  		install_$tool
  		echo "Done"
  	done
  	echo "Configuration(s) installed successfully"
  }

  install_tools

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        lcdot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-$HOME/lcdot_backup}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      lcdot_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      lcdot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "Cargo is needed to install certain tools, go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      # :flag.case
      --dep | -d)

        # :flag.case_no_arg
        args['--dep']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_repeatable

        if [[ -z ${args['tool']+x} ]]; then
          args['tool']="\"$1\""
          shift
        else
          args['tool']="${args[tool]} \"$1\""
          shift
        fi

        ;;

    esac
  done

  # :command.whitelist_filter
  eval "input_array=(${args[tool]})"
  for i in "${input_array[@]}"; do
    if [[ ! $i =~ ^(nvim|starship|delta|exa|bat|bob|zellij|mprocs|gitui|lazygit|porsmo|wikitui|fd|zoxide|rtx|navi|tmux|ncspot|vim|wezterm|zsh|sccache|alacritty|fzf|all)$ ]]; then
      printf "%s\n" "tool must be one of: nvim, starship, delta, exa, bat, bob, zellij, mprocs, gitui, lazygit, porsmo, wikitui, fd, zoxide, rtx, navi, tmux, ncspot, vim, wezterm, zsh, sccache, alacritty, fzf, all" >&2
      exit 1
    fi
  done

}

# :command.initialize
initialize() {
  version="0.4.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-$HOME/lcdot_backup}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") lcdot_install_command ;;
  esac
}

initialize
run "$@"
