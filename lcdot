#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
lcdot_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  else
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot COMMAND\n"
  printf "  lcdot [COMMAND] --help | -h\n"
  printf "  lcdot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   install my own nvim configuration\n" "nvim     "
  printf "  %s   Install my starship prompt\n" "starship "
  printf "  %s   Install the delta diff pager for git\n" "delta    "
  printf "  %s   Install the exa listing tool\n" "exa      "
  printf "  %s   Install the bat cli tool\n" "bat      "
  printf "  %s   Install the bob-nvim cli tool\n" "bob-nvim "
  printf "  %s   Install the zellij cli tool\n" "zellij   "
  printf "  %s   Install the mprocs cli tool\n" "mprocs   "
  printf "  %s   Install the gitui cli tool\n" "gitui    "
  printf "  %s   Install the lazygit cli tool\n" "lazygit  "
  printf "  %s   Install the porsmo cli tool\n" "porsmo   "
  printf "  %s   Install the wiki-tui cli tool\n" "wiki-tui "
  printf "  %s   Install the fd-find cli tool\n" "fd-find  "
  printf "  %s   Install the zoxide cli tool\n" "zoxide   "
  printf "  %s   Install the rtx-cli cli tool\n" "rtx-cli  "
  printf "  %s   Install the navi cli tool\n" "navi     "
  printf "  %s   install my own tmux configuration\n" "tmux     "
  printf "  %s   Install the ncspot cli tool\n" "ncspot   "
  printf "  %s   install my own vim configuration\n" "vim      "
  printf "  %s   install my own wezterm configuration\n" "wezterm  "
  printf "  %s   install my own zshell configuration\n" "zsh      "
  printf "  %s   Configure cargo package manager to use sccache\n" "sccache  "
  printf "  %s   Install my own alacritty configuration\n" "alacritty"
  printf "  %s   installs all configuration files\n" "all      "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "LCDOT_BACKUP"
    printf "    path to save backups before installing\n"
    printf "    Default: $HOME/lcdot_backup\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ARCHBTW"
    printf "    whether or not installing to a ARCH based distro. Tries to install tools\n    from AUR packages\n"
    echo

  fi
}

# :command.usage
lcdot_nvim_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot nvim - install my own nvim configuration\n"
    echo

  else
    printf "lcdot nvim - install my own nvim configuration\n"
    echo

  fi

  printf "Alias: n\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot nvim [OPTIONS]\n"
  printf "  lcdot nvim --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/nvim\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcdot nvim -b\n"
    echo

  fi
}

# :command.usage
lcdot_starship_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot starship - Install my starship prompt\n"
    echo

  else
    printf "lcdot starship - Install my starship prompt\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot starship [OPTIONS]\n"
  printf "  lcdot starship --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/starship\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_delta_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot delta - Install the delta diff pager for git\n"
    echo

  else
    printf "lcdot delta - Install the delta diff pager for git\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot delta [OPTIONS]\n"
  printf "  lcdot delta --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/delta-git\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_exa_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot exa - Install the exa listing tool\n"
    echo

  else
    printf "lcdot exa - Install the exa listing tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot exa [OPTIONS]\n"
  printf "  lcdot exa --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_bat_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot bat - Install the bat cli tool\n"
    echo

  else
    printf "lcdot bat - Install the bat cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot bat [OPTIONS]\n"
  printf "  lcdot bat --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/bat\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_bob_nvim_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot bob-nvim - Install the bob-nvim cli tool\n"
    echo

  else
    printf "lcdot bob-nvim - Install the bob-nvim cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot bob-nvim [OPTIONS]\n"
  printf "  lcdot bob-nvim --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/bob-nvim\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_zellij_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot zellij - Install the zellij cli tool\n"
    echo

  else
    printf "lcdot zellij - Install the zellij cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot zellij [OPTIONS]\n"
  printf "  lcdot zellij --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/zellij\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_mprocs_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot mprocs - Install the mprocs cli tool\n"
    echo

  else
    printf "lcdot mprocs - Install the mprocs cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot mprocs [OPTIONS]\n"
  printf "  lcdot mprocs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_gitui_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot gitui - Install the gitui cli tool\n"
    echo

  else
    printf "lcdot gitui - Install the gitui cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot gitui [OPTIONS]\n"
  printf "  lcdot gitui --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/gitui\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_lazygit_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot lazygit - Install the lazygit cli tool\n"
    echo

  else
    printf "lcdot lazygit - Install the lazygit cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot lazygit [OPTIONS]\n"
  printf "  lcdot lazygit --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/lazygit\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_porsmo_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot porsmo - Install the porsmo cli tool\n"
    echo

  else
    printf "lcdot porsmo - Install the porsmo cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot porsmo [OPTIONS]\n"
  printf "  lcdot porsmo --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_wiki_tui_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot wiki-tui - Install the wiki-tui cli tool\n"
    echo

  else
    printf "lcdot wiki-tui - Install the wiki-tui cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot wiki-tui [OPTIONS]\n"
  printf "  lcdot wiki-tui --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_fd_find_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot fd-find - Install the fd-find cli tool\n"
    echo

  else
    printf "lcdot fd-find - Install the fd-find cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot fd-find [OPTIONS]\n"
  printf "  lcdot fd-find --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_zoxide_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot zoxide - Install the zoxide cli tool\n"
    echo

  else
    printf "lcdot zoxide - Install the zoxide cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot zoxide [OPTIONS]\n"
  printf "  lcdot zoxide --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_rtx_cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot rtx-cli - Install the rtx-cli cli tool\n"
    echo

  else
    printf "lcdot rtx-cli - Install the rtx-cli cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot rtx-cli [OPTIONS]\n"
  printf "  lcdot rtx-cli --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_navi_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot navi - Install the navi cli tool\n"
    echo

  else
    printf "lcdot navi - Install the navi cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot navi [OPTIONS]\n"
  printf "  lcdot navi --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/navi\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_tmux_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot tmux - install my own tmux configuration\n"
    echo

  else
    printf "lcdot tmux - install my own tmux configuration\n"
    echo

  fi

  printf "Alias: t\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot tmux [OPTIONS]\n"
  printf "  lcdot tmux --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/tmux\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt tmux -b\n"
    echo

  fi
}

# :command.usage
lcdot_ncspot_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot ncspot - Install the ncspot cli tool\n"
    echo

  else
    printf "lcdot ncspot - Install the ncspot cli tool\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot ncspot [OPTIONS]\n"
  printf "  lcdot ncspot --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/ncspot\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install the tool itself as well as its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_vim_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot vim - install my own vim configuration\n"
    echo

  else
    printf "lcdot vim - install my own vim configuration\n"
    echo

  fi

  printf "Alias: v\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot vim [OPTIONS]\n"
  printf "  lcdot vim --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/vim\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt vim -b\n"
    echo

  fi
}

# :command.usage
lcdot_wezterm_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot wezterm - install my own wezterm configuration\n"
    echo

  else
    printf "lcdot wezterm - install my own wezterm configuration\n"
    echo

  fi

  printf "Alias: w\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot wezterm [OPTIONS]\n"
  printf "  lcdot wezterm --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/wezterm\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt w -b\n"
    echo

  fi
}

# :command.usage
lcdot_zsh_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot zsh - install my own zshell configuration\n"
    echo

  else
    printf "lcdot zsh - install my own zshell configuration\n"
    echo

  fi

  printf "Alias: z\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot zsh [OPTIONS]\n"
  printf "  lcdot zsh --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/zsh\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt z -b\n"
    echo

  fi
}

# :command.usage
lcdot_sccache_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot sccache - Configure cargo package manager to use sccache\n"
    echo

  else
    printf "lcdot sccache - Configure cargo package manager to use sccache\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot sccache [OPTIONS]\n"
  printf "  lcdot sccache --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/cargo\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install sccache as well as set up cargo configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_alacritty_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot alacritty - Install my own alacritty configuration\n"
    echo

  else
    printf "lcdot alacritty - Install my own alacritty configuration\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot alacritty [OPTIONS]\n"
  printf "  lcdot alacritty --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/alacritty\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Install alacritty as well as set up its configuration\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
lcdot_all_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot all - installs all configuration files\n"
    echo

  else
    printf "lcdot all - installs all configuration files\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot all [OPTIONS]\n"
  printf "  lcdot all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations for all tools in $LCDOT_BACKUP\n"
    echo

    # :flag.usage
    printf "  %s\n" "--install, -i"
    printf "    Installs all tools as well as setting up their configurations\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/alacritty.sh
install_alacritty() {

    local backup=${args[--backup]}
    local install=${args[--install]}
    local DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing alacritty"

        echo "Installing dependencies"
        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            pacman -S cmake freetype2 fontconfig pkg-config make libxcb libxkbcommon python

        else
            sudo apt install cmake pkg-config libfreetype6-dev libfontconfig1-dev libxcb-xfixes0-dev libxkbcommon-dev python3
        fi

        echo "Installing alacritty from source with cargo"
        cargo install alacritty
    fi
    echo "Installing  alacritty configuration from $DOTFILES_LOCATION"
    mkdir -p "$HOME/.config/alacritty"
    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/alacritty"
        mkdir -p "$LCDOT_BACKUP"/alacritty

        mv "$HOME/.config/alacritty/*.toml" "$LCDOT_BACKUP"/alacritty/
    fi

    echo "Setting up alacritty configuration"
    ln -s "$DOTFILES_LOCATION/alacritty/alacritty.toml" "$HOME/.config/alacritty/alacritty.toml"
    ln -s "$DOTFILES_LOCATION/alacritty/tokyonight-storm.toml" "$HOME/.config/alacritty/tokyonight-storm.toml"
}

# src/lib/bat.sh
install_bat() {
    local backup=${args[--backup]}
    local install=${args[--install]}
    local DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing bat"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S bat

        else
            echo "Installing bat with apt"
            sudo apt install bat
        fi
    fi
    echo "Installing bat configuration from $DOTFILES_LOCATION"
    local bat_config_file=$(bat --config-file)
    mkdir -p "$(dirname "$bat_config_file")"
    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/bat"
        mkdir -p "$LCDOT_BACKUP"/bat

        mv "$bat_config_file" "$LCDOT_BACKUP"/bat/bat.old
    fi

    echo "Setting up bat configuration"
    ln -sf "$DOTFILES_LOCATION/bat/config" "$(bat --config-file)"
    ln -sfn "$DOTFILES_LOCATION/bat/themes/" "$(bat --config-dir)"
}

# src/lib/bob.sh
install_bob() {
    local backup=${args[--backup]}
    local install=${args[--install]}
    local DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing bob-nvim "
        cargo install bob-nvim
    fi
    echo "Installing bob-nvim configuration from $DOTFILES_LOCATION"

    local bob_config_file=$HOME/.config/bob/config.json
    if [ "$BOB_CONFIG" ]; then
        bob_config_file=$BOB_CONFIG
    fi

    mkdir -p "$(dirname "$bob_config_file")"

    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/bob-nvim"
        mkdir -p "$LCDOT_BACKUP"/bob-nvim
        mv "$bob_config_file" "$LCDOT_BACKUP"/bob-nvim/config.json
    fi

    echo "Setting up bob-nvim configuration"
    ln -sf "$DOTFILES_LOCATION"/bob-nvim/config.json "$bob_config_file"
}

# src/lib/delta.sh
install_delta() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing git-delta"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S git-delta

        else
            echo "Installing bat with cargo"
            cargo install git-delta
        fi
    fi
    echo "Installing git configuration from $DOTFILES_LOCATION"

    if [ "$backup" ]; then
        echo "Moving present gitconfig file to $LCDOT_BACKUP/gitconfig"
        mkdir -p "$LCDOT_BACKUP"/gitconfig
        mv "$HOME"/.gitconfig "$LCDOT_BACKUP"/gitconfig/gitconfig.old
    fi
    echo "Linking gitconfig file in home directory"
    ln -sf "$DOTFILES_LOCATION/gitconfig/gitconfig" "$HOME/.gitconfig"
    echo "Done"
}

# src/lib/exa.sh
install_exa() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing exa"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S exa

        else
            echo "Installing exa with cargo"
            sudo cargo install exa
        fi
    fi

    echo "There is no configuration to install for exa, congrats!"
}

# src/lib/fd-find.sh
install_fd() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing fd-find"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S fd

        else
            echo "Installing exa with cargo"
            sudo cargo install fd-find
        fi
    fi

    echo "There is no configuration to install for fd, congrats!"
}

# src/lib/gitui.sh
install_gitui() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing gitui"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S gitui

        else
            echo "Installing gitui with cargo"
            sudo cargo install gitui
        fi
    fi

    if [ "$backup" ]; then
        echo "Moving present gitconfig file to $LCDOT_BACKUP/gitui"
        mkdir -p "$LCDOT_BACKUP"/gitui
        mv "$HOME"/.config/gitui/* "$LCDOT_BACKUP"/gitui/
    fi
    echo "Setting up gitui configuration"
    ln -sfn "$DOTFILES_LOCATION/gitui/" "$HOME/.config/gitui"
    echo "Done"
}

# src/lib/lazygit.sh
install_lazygit() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing lazygit"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S lazygit

        else
            echo "Installing lazygit with go"
            go install github.com/jesseduffield/lazygit@latest
        fi
    fi
    echo "Installing lazygit configuration from $DOTFILES_LOCATION"
    mkdir -p "$HOME"/.config/lazygit
    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/lazygit"
        mkdir -p "$LCDOT_BACKUP"/lazygit

        mv "$HOME"/.config/lazygit/* "$LCDOT_BACKUP"/lazygit/
    fi

    echo "Setting up lazygit configuration"
    ln -sf "$DOTFILES_LOCATION"/lazygit/config.yml "$HOME"/.config/lazygit/config.yml
}

# src/lib/mprocs.sh
install_mprocs() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing mprocs"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S mprocs

        else
            echo "Installing lazygit with cargo"
            cargo install mprocs
        fi
    fi
    echo "There is no configuration to install for mprocs, congrats!"
}

# src/lib/navi.sh
install_navi() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing navi"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S navi

        else
            echo "Installing navi with cargo"
            sudo cargo install navi --locked
        fi
    fi
    echo "Installing navi configuration from $DOTFILES_LOCATION"
    navi_config_file=$(navi info config-path)
    mkdir -p "$(dirname "$navi_config_file")"
    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/navi"
        mkdir -p "$LCDOT_BACKUP"/navi

        mv "$navi_config_file" "$LCDOT_BACKUP"/navi/
    fi

    echo "Setting up navi configuration"
    ln -sf "$DOTFILES_LOCATION"/navi/config.yaml "$navi_config_file"
}

# src/lib/ncspot.sh
install_ncspot() {
    install=${args[--install]}
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD

    if [ "$install" ]; then
        echo "Installing ncspot"
        cargo install ncspot --locked
    fi

    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/ncspot"
        mkdir -p "$LCDOT_BACKUP"/rust-tools/ncspot

        mv "$HOME"/.config/ncspot "$LCDOT_BACKUP"/rust-tools/ncspot
    fi

    echo "Setting up ncspot configuration"
    ln -sfn "$DOTFILES_LOCATION/ncspot/" "$HOME/.config/ncspot"
    echo "Done"
}

# src/lib/nvim.sh
install_nvim() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "installing nvim configuration from $DOTFILES_LOCATION"

    mkdir -p "$HOME"/.config
    if [ "$backup" ]; then
        echo "moving present configuration to $LCDOT_BACKUP/nvim"
        mkdir -p "$LCDOT_BACKUP"/nvim
        mv "$HOME"/.config/nvim "$LCDOT_BACKUP"/nvim
    fi
    echo "Linking custom config"
    ln -sfr "$DOTFILES_LOCATION/nvim" "$HOME/.config/nvim"
    echo "Done, run nvim and :checkhealth"
}

# src/lib/porsmo.sh
install_porsmo() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing porsmo"
        cargo install porsmo
    fi

    echo "There is no configuration to install for porsmo, congrats!"
}

# src/lib/rtx.sh
install_rtx() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing rtx"
        cargo install rtx-cli
    fi

    echo "There is no configuration to install for rtx, congrats!"
}

# src/lib/sccache.sh
install_sccache() {
    install=${args[--install]}
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD

    if [ "$install" ]; then
        echo "Installing sccache"
        cargo install sccache --locked
    fi

    if [ "$backup" ]; then
        echo "Moving previous configuration in $LCDOT_BACKUP/cargo"
        mkdir -p "$LCDOT_BACKUP"/cargo

        mv "$HOME"/.cargo/config.toml "$LCDOT_BACKUP"/cargo/
    fi

    echo "Setting up cargo to use sccache"
    ln -sf "$DOTFILES_LOCATION"/cargo/config.toml "$HOME"/.cargo/config.toml
    echo "Done"
}

# src/lib/starship.sh
install_starship() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD

    if [ "$install" ]; then
        echo "Installing starship"

        cargo install starship --locked
    fi

    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/starship"
        mkdir -p "$LCDOT_BACKUP"/starship

        mv "$HOME/.config/starship.toml" "$LCDOT_BACKUP"/starship/starship.toml
    fi

    echo "Setting up starship configuration from $DOTFILES_LOCATION"
    ln -sf "$DOTFILES_LOCATION"/starship/starship.toml "$HOME"/.config/starship.toml

    echo "Done"
}

# src/lib/tmux.sh
install_tmux() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "Installing tmux configuration from $DOTFILES_LOCATION"

    if [ "$backup" ]; then
        echo "Moving present configuration in $LCDOT_BACKUP/tmux"
        mkdir -p "$LCDOT_BACKUP"/tmux
        mv "$HOME"/.config/tmux "$LCDOT_BACKUP"/tmux
    fi

    mkdir -p "$HOME/.config/tmux/plugins/tpm"
    ln -sf "$DOTFILES_LOCATION/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"
    echo "Installing TPM"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.config/tmux/plugins/tpm"
    echo "Done, open tmux and press CTRL I to install plugins"
}

# src/lib/wezterm.sh
install_wezterm() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "Installing wezterm configuration from $DOTFILES_LOCATION"

    if [ "$backup" ]; then
        echo "Moving present configuration to $LCDOT_BACKUP/wezterm"
        mkdir -p "$LCDOT_BACKUP"/wezterm
        mv "$HOME/.config/wezterm" "$LCDOT_BACKUP/wezterm/"
    fi

    mkdir -p "$HOME"/.config/wezterm
    ln -sf "$DOTFILES_LOCATION"/wezterm/wezterm.lua "$HOME"/.config/wezterm/wezterm.lua
    echo "Done"
}

# src/lib/wiki-tui.sh
install_wikitui() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing wiki-tui"
        cargo install wiki-tui
    fi

    echo "There is no configuration to install for wiki-tui, congrats!"
}

# src/lib/zellij.sh
install_zellij() {
    backup=${args[--backup]}
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing zellij"
        cargo install zellij --locked
    fi

    mkdir -p "$HOME"/.config/zellij/
    echo "Installing zellij configuration from $DOTFILES_LOCATION"
    if [ "$backup" ]; then
        echo "Moving previous configurations in $LCDOT_BACKUP/zellij"
        mkdir -p "$LCDOT_BACKUP"/zellij/

        mv "$HOME"/.config/zellij/config.kdl "$LCDOT_BACKUP"/zellij/config.kdl
    fi

    echo "Setting up zellij configuration"
    ln -sf "$DOTFILES_LOCATION"/zellij/config.kdl "$HOME"/.config/zellij/config.kdl
}

# src/lib/zoxide.sh
install_zoxide() {
    install=${args[--install]}
    DOTFILES_LOCATION=$PWD
    if [ "$install" ]; then
        echo "Installing zoxide"

        if [ "$ARCHBTW"=true ]; then
            echo "Arch based distro detected, installing using pacman"
            sudo pacman -S zoxide

        else
            echo "Installing bat with cargo"
            cargo install zoxide --locked
        fi
    fi

    echo "There is no configuration to install for zoxide, congrats!"
}

# src/lib/zsh.sh
install_zsh() {
    backup=${args[--backup]}
    DOTFILES_LOCATION=$PWD
    echo "Installing zsh configuration from $DOTFILES_LOCATION"
    if [ "$backup" ]; then
        echo "Moving present configuration to $LCDOT_BACKUP/zsh"
        mkdir -p "$LCDOT_BACKUP"/zsh
        [ -f "$HOME"/.zshrc ] && mv "$HOME"/.zshrc "$LCDOT_BACKUP"/zsh/zshrc
        [ -f "$HOME"/.zshenv ] && mv "$HOME"/.zshenv "$LCDOT_BACKUP"/zsh/zshenv
        [ -f "$HOME"/.alias ] && mv "$HOME"/.alias "$LCDOT_BACKUP"/zsh/alias

    fi
    ln -sf "$DOTFILES_LOCATION"/zsh/zshrc "$HOME"/.zshrc
    ln -sf "$DOTFILES_LOCATION"/zsh/zshenv "$HOME"/.zshenv
    ln -sf "$DOTFILES_LOCATION"/alias/alias "$HOME"/.alias

    echo "Done"
}

# :command.command_functions
# :command.function
lcdot_nvim_command() {
  # src/nvim_command.sh
  install_nvim

}

# :command.function
lcdot_starship_command() {
  # src/starship_command.sh
  install_starship

}

# :command.function
lcdot_delta_command() {
  # src/delta_command.sh
  install_delta

}

# :command.function
lcdot_exa_command() {
  # src/exa_command.sh
  install_exa

}

# :command.function
lcdot_bat_command() {
  # src/bat_command.sh
  install_bat

}

# :command.function
lcdot_bob_nvim_command() {
  # src/bob_nvim_command.sh
  install_bob

}

# :command.function
lcdot_zellij_command() {
  # src/zellij_command.sh
  install_zellij

}

# :command.function
lcdot_mprocs_command() {
  # src/mprocs_command.sh
  install_mprocs

}

# :command.function
lcdot_gitui_command() {
  # src/gitui_command.sh
  install_gitui

}

# :command.function
lcdot_lazygit_command() {
  # src/lazygit_command.sh
  install_lazygit

}

# :command.function
lcdot_porsmo_command() {
  # src/porsmo_command.sh
  install_porsmo

}

# :command.function
lcdot_wiki_tui_command() {
  # src/wiki_tui_command.sh
  install_wikitui

}

# :command.function
lcdot_fd_find_command() {
  # src/fd_find_command.sh
  install_fd

}

# :command.function
lcdot_zoxide_command() {
  # src/zoxide_command.sh
  install_zoxide

}

# :command.function
lcdot_rtx_cli_command() {
  # src/rtx_cli_command.sh
  install_rtx

}

# :command.function
lcdot_navi_command() {
  # src/navi_command.sh
  install_navi

}

# :command.function
lcdot_tmux_command() {
  # src/tmux_command.sh
  install_tmux

}

# :command.function
lcdot_ncspot_command() {
  # src/ncspot_command.sh
  install_ncspot

}

# :command.function
lcdot_vim_command() {
  # src/vim_command.sh
  echo "This command is not implemented yet, feel free to open an issue on the GitHub page"

}

# :command.function
lcdot_wezterm_command() {
  # src/wezterm_command.sh
  install_wezterm

}

# :command.function
lcdot_zsh_command() {
  # src/zsh_command.sh
  install_zsh

}

# :command.function
lcdot_sccache_command() {
  # src/sccache_command.sh
  install_sccache

}

# :command.function
lcdot_alacritty_command() {
  # src/alacritty_command.sh
  install_alacritty

}

# :command.function
lcdot_all_command() {
  # src/all_command.sh
  install_all() {
      echo "Installing sccache first to use for later installations"
      install_sccache

      install_bob

      install_bat

      install_delta

      install_exa

      install_fd

      install_gitui

      install_lazygit

      install_mprocs

      install_navi

      install_nvim

      install_porsmo

      install_rtx

      install_starship

      install_tmux

      install_wezterm

      install_wikitui

      install_zellij

      install_zoxide

      install_zsh
  }

  install_all

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        lcdot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-$HOME/lcdot_backup}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    nvim | n)
      action="nvim"
      shift
      lcdot_nvim_parse_requirements "$@"
      shift $#
      ;;

    starship)
      action="starship"
      shift
      lcdot_starship_parse_requirements "$@"
      shift $#
      ;;

    delta)
      action="delta"
      shift
      lcdot_delta_parse_requirements "$@"
      shift $#
      ;;

    exa)
      action="exa"
      shift
      lcdot_exa_parse_requirements "$@"
      shift $#
      ;;

    bat)
      action="bat"
      shift
      lcdot_bat_parse_requirements "$@"
      shift $#
      ;;

    bob-nvim)
      action="bob-nvim"
      shift
      lcdot_bob_nvim_parse_requirements "$@"
      shift $#
      ;;

    zellij)
      action="zellij"
      shift
      lcdot_zellij_parse_requirements "$@"
      shift $#
      ;;

    mprocs)
      action="mprocs"
      shift
      lcdot_mprocs_parse_requirements "$@"
      shift $#
      ;;

    gitui)
      action="gitui"
      shift
      lcdot_gitui_parse_requirements "$@"
      shift $#
      ;;

    lazygit)
      action="lazygit"
      shift
      lcdot_lazygit_parse_requirements "$@"
      shift $#
      ;;

    porsmo)
      action="porsmo"
      shift
      lcdot_porsmo_parse_requirements "$@"
      shift $#
      ;;

    wiki-tui)
      action="wiki-tui"
      shift
      lcdot_wiki_tui_parse_requirements "$@"
      shift $#
      ;;

    fd-find)
      action="fd-find"
      shift
      lcdot_fd_find_parse_requirements "$@"
      shift $#
      ;;

    zoxide)
      action="zoxide"
      shift
      lcdot_zoxide_parse_requirements "$@"
      shift $#
      ;;

    rtx-cli)
      action="rtx-cli"
      shift
      lcdot_rtx_cli_parse_requirements "$@"
      shift $#
      ;;

    navi)
      action="navi"
      shift
      lcdot_navi_parse_requirements "$@"
      shift $#
      ;;

    tmux | t)
      action="tmux"
      shift
      lcdot_tmux_parse_requirements "$@"
      shift $#
      ;;

    ncspot)
      action="ncspot"
      shift
      lcdot_ncspot_parse_requirements "$@"
      shift $#
      ;;

    vim | v)
      action="vim"
      shift
      lcdot_vim_parse_requirements "$@"
      shift $#
      ;;

    wezterm | w)
      action="wezterm"
      shift
      lcdot_wezterm_parse_requirements "$@"
      shift $#
      ;;

    zsh | z)
      action="zsh"
      shift
      lcdot_zsh_parse_requirements "$@"
      shift $#
      ;;

    sccache)
      action="sccache"
      shift
      lcdot_sccache_parse_requirements "$@"
      shift $#
      ;;

    alacritty)
      action="alacritty"
      shift
      lcdot_alacritty_parse_requirements "$@"
      shift $#
      ;;

    all)
      action="all"
      shift
      lcdot_all_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      lcdot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_nvim_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_nvim_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nvim"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_starship_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_starship_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="starship"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_delta_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_delta_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="delta"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_exa_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_exa_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="exa"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_bat_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_bat_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="bat"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_bob_nvim_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_bob_nvim_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="bob-nvim"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_zellij_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_zellij_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="zellij"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_mprocs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_mprocs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="mprocs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_gitui_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_gitui_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="gitui"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_lazygit_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_lazygit_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v go >/dev/null 2>&1; then
    deps['rust']="$(command -v go | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://go.dev/doc/install to install go lang, or use managers such as rtx" >&2
    exit 1
  fi

  # :command.command_filter
  action="lazygit"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_porsmo_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_porsmo_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="porsmo"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_wiki_tui_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_wiki_tui_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="wiki-tui"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_fd_find_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_fd_find_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="fd-find"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_zoxide_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_zoxide_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="zoxide"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_rtx_cli_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_rtx_cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="rtx-cli"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_navi_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_navi_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="navi"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_tmux_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_tmux_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="tmux"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_ncspot_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_ncspot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="ncspot"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_vim_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_vim_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="vim"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_wezterm_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_wezterm_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wezterm"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_zsh_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_zsh_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="zsh"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_sccache_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_sccache_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="sccache"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_alacritty_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_alacritty_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v cargo >/dev/null 2>&1; then
    deps['rust']="$(command -v cargo | head -n1)"
  else
    printf "missing dependency: rust\n" >&2
    printf "%s\n" "go to https://doc.rust-lang.org/cargo/getting-started/installation.html to install cargo and rust" >&2
    exit 1
  fi

  # :command.command_filter
  action="alacritty"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      # :flag.case
      --install | -i)

        # :flag.case_no_arg
        args['--install']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.3.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-$HOME/lcdot_backup}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "nvim") lcdot_nvim_command ;;
    "starship") lcdot_starship_command ;;
    "delta") lcdot_delta_command ;;
    "exa") lcdot_exa_command ;;
    "bat") lcdot_bat_command ;;
    "bob-nvim") lcdot_bob_nvim_command ;;
    "zellij") lcdot_zellij_command ;;
    "mprocs") lcdot_mprocs_command ;;
    "gitui") lcdot_gitui_command ;;
    "lazygit") lcdot_lazygit_command ;;
    "porsmo") lcdot_porsmo_command ;;
    "wiki-tui") lcdot_wiki_tui_command ;;
    "fd-find") lcdot_fd_find_command ;;
    "zoxide") lcdot_zoxide_command ;;
    "rtx-cli") lcdot_rtx_cli_command ;;
    "navi") lcdot_navi_command ;;
    "tmux") lcdot_tmux_command ;;
    "ncspot") lcdot_ncspot_command ;;
    "vim") lcdot_vim_command ;;
    "wezterm") lcdot_wezterm_command ;;
    "zsh") lcdot_zsh_command ;;
    "sccache") lcdot_sccache_command ;;
    "alacritty") lcdot_alacritty_command ;;
    "all") lcdot_all_command ;;
  esac
}

initialize
run "$@"
