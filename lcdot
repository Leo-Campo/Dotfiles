#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
lcdot_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  else
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot COMMAND\n"
  printf "  lcdot [COMMAND] --help | -h\n"
  printf "  lcdot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   install a configuration\n" "install"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "LCDOT_BACKUP"
    printf "    path to save backups before installing\n"
    printf "    Default: ~/lcdot_backup\n"
    echo

  fi
}

# :command.usage
lcdot_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot install - install a configuration\n"
    echo

  else
    printf "lcdot install - install a configuration\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot install NAME [OPTIONS]\n"
  printf "  lcdot install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "NAME"
    printf "    name of the configuration to install\n"
    printf "    Allowed: all, nvim, gitconfig, rust-tools, tmux, vim, wezterm\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcdot install tmux\n"
    printf "  lcdot install nvim -f\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
lcdot_install_command() {
  # src/install_command.sh
  name=${args[name]}
  backup=${args[--backup]}
  DOTFILES_LOCATION=$(pwd)
  echo "installing $name from $DOTFILES_LOCATION"

  if [ $name == "nvim" ]; then
    echo "Installing NvChad"
    if [ backup ]; then
      echo "moving present configuration to $LCDOT_BACKUP/nvim"
      mkdir -p $LCDOT_BACKUP/nvim
      mv $HOME/.config/nvim $LCDOT_BACKUP/nvim
    fi
    mkdir -p $HOME/.config
    git clone https://github.com/NvChad/NvChad "$HOME/.config/nvim" --depth 1
    echo "Linking custom config into NvChad"
    ln -sfr "$DOTFILES_LOCATION/nvim/custom" "$HOME/.config/nvim/lua"
    echo "Done, run nvim. Do not load any sample config, run :Lazy Sync and :MasonInstallAll to install plugins, lsps, formatters and so on"

  elif [ $name == "gitconfig" ]; then
    echo "Setting up gitconfig to use delta and other tools"
    if [ backup ]; then

      echo "moving present gitconfig file to $LCDOT_BACKUP/gitconfig"
      mkdir -p $LCDOT_BACKUP/gitconfig
      mv $HOME/
    fi
    echo "Installing Delta"
    cargo install git-delta
    echo "Linking gitconfig file in home directory"
    mkdir -p $HOME/.gitconfig
    ln -sf "$DOTFILES_LOCATION/gitconfig/gitconfig" "$HOME/.gitconfig"
    echo "Done"

  elif [ $name == "rust-tools" ]; then
    echo "Installing rust cli tools"
    echo "setting up gitui configuration"
    mkdir -p $HOME/.config/gitui
    mkdir -p $HOME/.config/ncspot
    mkdir -p $HOME/.cargo/
    ln -sfn "$DOTFILES_LOCATION/rust-tools/gitui/" "$HOME/.config/gitui"
    echo "setting up ncspot configuration"
    ln -sfn "$DOTFILES_LOCATION/rust-tools/ncspot/" "$HOME/.config/ncspot"
    echo "installing sccache first to use it in next installations"
    cargo install sccache

    echo "setting up cargo configuration"
    ln -sf $DOTFILES_LOCATION/rust-tools/config.toml $HOME/.cargo/config.toml
    echo "installing other tools"
    cargo install exa bat starship bob-nvim zellij mprocs gitui porsmo wiki-tui fd-find zoxide rtx-cli
    echo "setting up starship configuration"
    ln -sf "$DOTFILES_LOCATION/rust-tools/starship.toml" "$HOME/.config/starship.toml"
    echo "Done"

  elif [ $name == "tmux" ]; then

    echo "Installing tmux configuration"

    mkdir -p "$HOME/.config/tmux/plugins/tpm"
    ln -sf "$DOTFILES_LOCATION/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"
    echo "Installing TPM"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.config/tmux/plugins/tpm"
    echo "Done, open tmux and press CTRL I to install plugins"

  elif [ $name == "wezterm" ]; then

    echo "Installing wezterm configuration"
    mkdir -p $HOME/.config/wezterm
    ln -sf $DOTFILES_LOCATION/wezterm/wezterm.lua $HOME/.config/wezterm/wezterm.lua
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        lcdot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-~/lcdot_backup}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      lcdot_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      lcdot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['name']+x} ]]; then

          args['name']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['name']+x} ]]; then
    printf "missing required argument: NAME\nusage: lcdot install NAME [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.whitelist_filter
  if [[ -n ${args['name']} ]] && [[ ! ${args['name']} =~ ^(all|nvim|gitconfig|rust-tools|tmux|vim|wezterm)$ ]]; then
    printf "%s\n" "name must be one of: all, nvim, gitconfig, rust-tools, tmux, vim, wezterm" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-~/lcdot_backup}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") lcdot_install_command ;;
  esac
}

initialize
run "$@"
