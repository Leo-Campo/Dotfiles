#!/usr/bin/env bash
# This script was generated by bashly 1.0.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
lcdot_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  else
    printf "lcdot - Helper script to set up my own dotfile environment\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot COMMAND\n"
  printf "  lcdot [COMMAND] --help | -h\n"
  printf "  lcdot --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   install my own nvim configuration\n" "nvim      "
  printf "  %s   install my own git configuration\n" "gitconfig "
  printf "  %s   install my most used rust based tools and their configuration\n" "rust-tools"
  printf "  %s   install my own tmux configuration\n" "tmux      "
  printf "  %s   install my own vim configuration\n" "vim       "
  printf "  %s   install my own wezterm configuration\n" "wezterm   "
  printf "  %s   install my own zshell configuration\n" "zsh       "
  printf "  %s   installs all configuration files. Backup option is enabled by default\n" "all       "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "LCDOT_BACKUP"
    printf "    path to save backups before installing\n"
    printf "    Default: $HOME/lcdot_backup\n"
    echo

  fi
}

# :command.usage
lcdot_nvim_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot nvim - install my own nvim configuration\n"
    echo

  else
    printf "lcdot nvim - install my own nvim configuration\n"
    echo

  fi

  printf "Alias: n\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot nvim [OPTIONS]\n"
  printf "  lcdot nvim --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/nvim\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcdot nvim -b\n"
    echo

  fi
}

# :command.usage
lcdot_gitconfig_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot gitconfig - install my own git configuration\n"
    echo

  else
    printf "lcdot gitconfig - install my own git configuration\n"
    echo

  fi

  printf "Alias: git\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot gitconfig [OPTIONS]\n"
  printf "  lcdot gitconfig --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/gitconfig\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt git -b\n"
    echo

  fi
}

# :command.usage
lcdot_rust_tools_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot rust-tools - install my most used rust based tools and their configuration\n"
    echo

  else
    printf "lcdot rust-tools - install my most used rust based tools and their configuration\n"
    echo

  fi

  printf "Alias: rust\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot rust-tools [OPTIONS]\n"
  printf "  lcdot rust-tools --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/rust-tools\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt rust -b\n"
    echo

  fi
}

# :command.usage
lcdot_tmux_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot tmux - install my own tmux configuration\n"
    echo

  else
    printf "lcdot tmux - install my own tmux configuration\n"
    echo

  fi

  printf "Alias: t\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot tmux [OPTIONS]\n"
  printf "  lcdot tmux --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/tmux\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt tmux -b\n"
    echo

  fi
}

# :command.usage
lcdot_vim_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot vim - install my own vim configuration\n"
    echo

  else
    printf "lcdot vim - install my own vim configuration\n"
    echo

  fi

  printf "Alias: v\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot vim [OPTIONS]\n"
  printf "  lcdot vim --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/vim\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt vim -b\n"
    echo

  fi
}

# :command.usage
lcdot_wezterm_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot wezterm - install my own wezterm configuration\n"
    echo

  else
    printf "lcdot wezterm - install my own wezterm configuration\n"
    echo

  fi

  printf "Alias: w\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot wezterm [OPTIONS]\n"
  printf "  lcdot wezterm --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/wezterm\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt w -b\n"
    echo

  fi
}

# :command.usage
lcdot_zsh_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot zsh - install my own zshell configuration\n"
    echo

  else
    printf "lcdot zsh - install my own zshell configuration\n"
    echo

  fi

  printf "Alias: z\n"
  echo

  printf "%s\n" "Usage:"
  printf "  lcdot zsh [OPTIONS]\n"
  printf "  lcdot zsh --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--backup, -b"
    printf "    Backup existing configurations in LCDOT_BACKUP/zsh\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  lcodt z -b\n"
    echo

  fi
}

# :command.usage
lcdot_all_usage() {
  if [[ -n $long_usage ]]; then
    printf "lcdot all - installs all configuration files. Backup option is enabled by default\n"
    echo

  else
    printf "lcdot all - installs all configuration files. Backup option is enabled by default\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  lcdot all\n"
  printf "  lcdot all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
lcdot_nvim_command() {
  # src/nvim_command.sh
  backup=${args[--backup]}
  DOTFILES_LOCATION=$(pwd)
  echo "installing nvim configuration from $DOTFILES_LOCATION"

  mkdir -p $HOME/.config
  if [ $backup ]; then
    echo "moving present configuration to $LCDOT_BACKUP/nvim"
    mkdir -p $LCDOT_BACKUP/nvim
    mv $HOME/.config/nvim $LCDOT_BACKUP/nvim
  fi
  echo "Installing NvChad"
  git clone https://github.com/NvChad/NvChad "$HOME/.config/nvim" --depth 1
  echo "Linking custom config into NvChad"
  ln -sfr "$DOTFILES_LOCATION/nvim/custom" "$HOME/.config/nvim/lua"
  echo "Done, run nvim. Do not load any sample config, run :Lazy Sync and :MasonInstallAll to install plugins, lsps, formatters and so on"

}

# :command.function
lcdot_gitconfig_command() {
  # src/gitconfig_command.sh
    echo "Setting up gitconfig to use delta and other tools"
    if [ $backup ]; then

      echo "moving present gitconfig file to $LCDOT_BACKUP/gitconfig"
      mkdir -p $LCDOT_BACKUP/gitconfig
      mv $HOME/
    fi
    echo "Installing Delta"
    cargo install git-delta
    echo "Linking gitconfig file in home directory"
    mkdir -p $HOME/.gitconfig
    ln -sf "$DOTFILES_LOCATION/gitconfig/gitconfig" "$HOME/.gitconfig"
    echo "Done"

}

# :command.function
lcdot_rust_tools_command() {
  # src/rust_tools_command.sh
  backup=${args[--backup]}
  DOTFILES_LOCATION=$(pwd)

  echo "Installing rust cli tools and their configuration from $DOTFILES_LOCATION"
  mkdir -p $HOME/.config/gitui
  mkdir -p $HOME/.config/ncspot
  mkdir -p $HOME/.cargo/

  if [ $backup ]; then
    echo "Moving previous configurations in $LCDOT_BACKUP/rust-tools"
    mkdir -p $LCDOT_BACKUP/rust-tools/gitui
    mkdir -p $LCDOT_BACKUP/rust-tools/ncspot
    mkdir -p $LCDOT_BACKUP/rust-tools/cargo
    mkdir -p $LCDOT_BACKUP/rust-tools/starship

    mv $HOME/.config/gitui $LCDOT_BACKUP/rust-tools/gitui
    mv $HOME/.config/ncspot $LCDOT_BACKUP/rust-tools/ncspot
    mv $HOME/.cargo/config.toml $LCDOT_BACKUP/rust-tools/cargo/config.toml
    mv $HOME/.config/starship.toml $LCDOT_BACKUP/rust-tools/starship/starship.toml
  fi

  echo "setting up gitui configuration"
  ln -sfn "$DOTFILES_LOCATION/rust-tools/gitui/" "$HOME/.config/gitui"

  echo "setting up ncspot configuration"
  ln -sfn "$DOTFILES_LOCATION/rust-tools/ncspot/" "$HOME/.config/ncspot"

  echo "installing sccache first to use it in next installations"
  cargo install sccache

  echo "setting up cargo configuration"
  ln -sf $DOTFILES_LOCATION/rust-tools/config.toml $HOME/.cargo/config.toml

  echo "installing other tools"
  cargo install exa bat starship bob-nvim zellij mprocs gitui porsmo wiki-tui fd-find zoxide rtx-cli

  echo "setting up starship configuration"
  ln -sf "$DOTFILES_LOCATION/rust-tools/starship.toml" "$HOME/.config/starship.toml"

  echo "Done"

}

# :command.function
lcdot_tmux_command() {
  # src/tmux_command.sh
  backup=${args[--backup]}
  DOTFILES_LOCATION=$(pwd)
  echo "Installing tmux configuration from $DOTFILES_LOCATION"

  if [ $backup ]; then
    echo "Moving present configuration in $LCDOT_BACKUP/tmux"
    mkdir -p $LCDOT_BACKUP/tmux
    mv $HOME/.config/tmux $LCDOT_BACKUP/tmux
  fi

  mkdir -p "$HOME/.config/tmux/plugins/tpm"
  ln -sf "$DOTFILES_LOCATION/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"
  echo "Installing TPM"
  git clone https://github.com/tmux-plugins/tpm "$HOME/.config/tmux/plugins/tpm"
  echo "Done, open tmux and press CTRL I to install plugins"

}

# :command.function
lcdot_vim_command() {
  # src/vim_command.sh
  echo "This command is not implemented yet, feel free to open an issue on the GitHub page"

}

# :command.function
lcdot_wezterm_command() {
  # src/wezterm_command.sh
  backup=${args[--backup]}
  DOTFILES_LOCATION=$(pwd)
  echo "Installing wezterm configuration from $DOTFILES_LOCATION"

  if [ $backup ]; then

    echo "Moving present configuration to $LCDOT_BACKUP/wezterm"
    mkdir -p $LCDOT_BACKUP/wezterm
    mv "$HOME/.config/wezterm" "$LCDOT_BACKUP/wezterm/"
  fi

  mkdir -p $HOME/.config/wezterm
  ln -sf $DOTFILES_LOCATION/wezterm/wezterm.lua $HOME/.config/wezterm/wezterm.lua
  echo "Done"

}

# :command.function
lcdot_zsh_command() {
  # src/zsh_command.sh
  backup=${args[--backup]}
  DOTFILES_LOCATION=$(pwd)
  echo "Installing zsh configuration from $DOTFILES_LOCATION"
  if [ $backup ]; then
    echo "Moving present configuration to $LCDOT_BACKUP/zsh"
    mkdir -p $LCDOT_BACKUP/zsh
    mv $HOME/.zshrc $LCDOT_BACKUP/zsh/zshrc
    mv $HOME/.zshenv $LCDOT_BACKUP/zsh/zshenv
    mv $HOME/.alias $LCDOT_BACKUP/zsh/alias

  fi
  ln -sf $DOTFILES_LOCATION/zsh/zshrc $HOME/.zshrc
  ln -sf $DOTFILES_LOCATION/zsh/zshenv $HOME/.zshenv
  ln -sf $DOTFILES_LOCATION/alias/alias $HOME/.alias

  echo "Done"

}

# :command.function
lcdot_all_command() {
  # src/all_command.sh
  echo "This command is not implemented yet, feel free to open an issue on the GitHub page"

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        lcdot_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-$HOME/lcdot_backup}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    nvim | n)
      action="nvim"
      shift
      lcdot_nvim_parse_requirements "$@"
      shift $#
      ;;

    gitconfig | git)
      action="gitconfig"
      shift
      lcdot_gitconfig_parse_requirements "$@"
      shift $#
      ;;

    rust-tools | rust)
      action="rust-tools"
      shift
      lcdot_rust_tools_parse_requirements "$@"
      shift $#
      ;;

    tmux | t)
      action="tmux"
      shift
      lcdot_tmux_parse_requirements "$@"
      shift $#
      ;;

    vim | v)
      action="vim"
      shift
      lcdot_vim_parse_requirements "$@"
      shift $#
      ;;

    wezterm | w)
      action="wezterm"
      shift
      lcdot_wezterm_parse_requirements "$@"
      shift $#
      ;;

    zsh | z)
      action="zsh"
      shift
      lcdot_zsh_parse_requirements "$@"
      shift $#
      ;;

    all)
      action="all"
      shift
      lcdot_all_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      lcdot_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_nvim_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_nvim_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nvim"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_gitconfig_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_gitconfig_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="gitconfig"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_rust_tools_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_rust_tools_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="rust-tools"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_tmux_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_tmux_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="tmux"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_vim_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_vim_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="vim"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_wezterm_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_wezterm_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="wezterm"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_zsh_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_zsh_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="zsh"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --backup | -b)

        # :flag.case_no_arg
        args['--backup']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
lcdot_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        lcdot_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.2.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export LCDOT_BACKUP="${LCDOT_BACKUP:-$HOME/lcdot_backup}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "nvim") lcdot_nvim_command ;;
    "gitconfig") lcdot_gitconfig_command ;;
    "rust-tools") lcdot_rust_tools_command ;;
    "tmux") lcdot_tmux_command ;;
    "vim") lcdot_vim_command ;;
    "wezterm") lcdot_wezterm_command ;;
    "zsh") lcdot_zsh_command ;;
    "all") lcdot_all_command ;;
  esac
}

initialize
run "$@"
